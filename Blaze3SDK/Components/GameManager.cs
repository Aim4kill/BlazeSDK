using Blaze3SDK.Blaze;
using Blaze3SDK.Blaze.GameManager;
using BlazeCommon;
using static Blaze3SDK.Components.GameManager;

namespace Blaze3SDK.Components
{
    public class GameManager : ComponentData<GameManagerCommand, GameManagerNotification, GameManagerError>
    {
        public GameManager() : base((ushort)Component.GameManager)
        {

        }

        public override Type GetCommandErrorResponseType(GameManagerCommand command)
        {
            throw new NotImplementedException();
        }

        public override Type GetCommandRequestType(GameManagerCommand command) => command switch
        {
            GameManagerCommand.joinGame => typeof(JoinGameRequest),
            GameManagerCommand.createGame => typeof(CreateGameRequest),
            GameManagerCommand.finalizeGameCreation => typeof(UpdateGameSessionRequest),
            GameManagerCommand.advanceGameState => typeof(AdvanceGameStateRequest),
            GameManagerCommand.setPlayerCapacity => typeof(SetPlayerCapacityRequest),
            GameManagerCommand.updateMeshConnection => typeof(UpdateMeshConnectionRequest),
            GameManagerCommand.destroyGame => typeof(DestroyGameRequest),
            GameManagerCommand.setGameAttributes => typeof(SetGameAttributesRequest),
            _ => throw new NotImplementedException()
        };


        public override Type GetCommandResponseType(GameManagerCommand command) => command switch
        {
            GameManagerCommand.createGame => typeof(CreateGameResponse),
            GameManagerCommand.destroyGame => typeof(DestroyGameResponse),
            GameManagerCommand.advanceGameState => typeof(NullStruct),
            GameManagerCommand.setGameSettings => throw new NotImplementedException(),
            GameManagerCommand.setPlayerCapacity => throw new NotImplementedException(),
            GameManagerCommand.setPresenceMode => throw new NotImplementedException(),
            GameManagerCommand.setGameAttributes => typeof(NullStruct),
            GameManagerCommand.setPlayerAttributes => throw new NotImplementedException(),
            GameManagerCommand.joinGame => typeof(JoinGameResponse),
            GameManagerCommand.removePlayer => throw new NotImplementedException(),
            GameManagerCommand.startMatchmaking => throw new NotImplementedException(),
            GameManagerCommand.cancelMatchmaking => throw new NotImplementedException(),
            GameManagerCommand.finalizeGameCreation => typeof(NullStruct),
            GameManagerCommand.listGames => throw new NotImplementedException(),
            GameManagerCommand.setPlayerCustomData => throw new NotImplementedException(),
            GameManagerCommand.replayGame => throw new NotImplementedException(),
            GameManagerCommand.returnDedicatedServerToPool => throw new NotImplementedException(),
            GameManagerCommand.joinGameByGroup => throw new NotImplementedException(),
            GameManagerCommand.leaveGameByGroup => throw new NotImplementedException(),
            GameManagerCommand.migrateGame => throw new NotImplementedException(),
            GameManagerCommand.updateGameHostMigrationStatus => throw new NotImplementedException(),
            GameManagerCommand.resetDedicatedServer => throw new NotImplementedException(),
            GameManagerCommand.updateGameSession => throw new NotImplementedException(),
            GameManagerCommand.banPlayer => throw new NotImplementedException(),
            GameManagerCommand.updateMeshConnection => typeof(NullStruct),
            GameManagerCommand.removePlayerFromBannedList => throw new NotImplementedException(),
            GameManagerCommand.clearBannedList => throw new NotImplementedException(),
            GameManagerCommand.getBannedList => throw new NotImplementedException(),
            GameManagerCommand.addQueuedPlayerToGame => throw new NotImplementedException(),
            GameManagerCommand.updateGameName => throw new NotImplementedException(),
            GameManagerCommand.ejectHost => throw new NotImplementedException(),
            GameManagerCommand.getGameListSnapshot => throw new NotImplementedException(),
            GameManagerCommand.getGameListSubscription => throw new NotImplementedException(),
            GameManagerCommand.destroyGameList => throw new NotImplementedException(),
            GameManagerCommand.getFullGameData => throw new NotImplementedException(),
            GameManagerCommand.getMatchmakingConfig => throw new NotImplementedException(),
            GameManagerCommand.getGameDataFromId => throw new NotImplementedException(),
            GameManagerCommand.addAdminPlayer => throw new NotImplementedException(),
            GameManagerCommand.removeAdminPlayer => throw new NotImplementedException(),
            GameManagerCommand.setPlayerTeam => throw new NotImplementedException(),
            GameManagerCommand.changeGameTeamId => throw new NotImplementedException(),
            GameManagerCommand.migrateAdminPlayer => throw new NotImplementedException(),
            GameManagerCommand.getUserSetGameListSubscription => throw new NotImplementedException(),
            GameManagerCommand.swapPlayersTeam => throw new NotImplementedException(),
            GameManagerCommand.registerDynamicDedicatedServerCreator => throw new NotImplementedException(),
            GameManagerCommand.unregisterDynamicDedicatedServerCreator => throw new NotImplementedException(),
            _ => throw new NotImplementedException(),
        };

        public override Type GetNotificationType(GameManagerNotification notification) => notification switch
        {
            GameManagerNotification.NotifyMatchmakingFailed => throw new NotImplementedException(),
            GameManagerNotification.NotifyMatchmakingAsyncStatus => throw new NotImplementedException(),
            GameManagerNotification.NotifyGameCreated => throw new NotImplementedException(),
            GameManagerNotification.NotifyGameRemoved => throw new NotImplementedException(),
            GameManagerNotification.NotifyGameSetup => typeof(NotifyGameSetup),
            GameManagerNotification.NotifyPlayerJoining => typeof(NotifyPlayerJoining),
            GameManagerNotification.NotifyJoiningPlayerInitiateConnections => throw new NotImplementedException(),
            GameManagerNotification.NotifyPlayerJoiningQueue => throw new NotImplementedException(),
            GameManagerNotification.NotifyPlayerPromotedFromQueue => throw new NotImplementedException(),
            GameManagerNotification.NotifyPlayerClaimingReservation => throw new NotImplementedException(),
            GameManagerNotification.NotifyPlayerJoinCompleted => typeof(NotifyPlayerJoinCompleted),
            GameManagerNotification.NotifyPlayerRemoved => typeof(NotifyPlayerRemoved),
            GameManagerNotification.NotifyHostMigrationFinished => throw new NotImplementedException(),
            GameManagerNotification.NotifyHostMigrationStart => throw new NotImplementedException(),
            GameManagerNotification.NotifyPlatformHostInitialized => throw new NotImplementedException(),
            GameManagerNotification.NotifyGameAttribChange => typeof(NotifyGameAttribChange),
            GameManagerNotification.NotifyPlayerAttribChange => throw new NotImplementedException(),
            GameManagerNotification.NotifyPlayerCustomDataChange => throw new NotImplementedException(),
            GameManagerNotification.NotifyGameStateChange => typeof(NotifyGameStateChange),
            GameManagerNotification.NotifyGameSettingsChange => throw new NotImplementedException(),
            GameManagerNotification.NotifyGameCapacityChange => throw new NotImplementedException(),
            GameManagerNotification.NotifyGameReset => throw new NotImplementedException(),
            GameManagerNotification.NotifyGameReportingIdChange => throw new NotImplementedException(),
            GameManagerNotification.NotifyGameSessionUpdated => throw new NotImplementedException(),
            GameManagerNotification.NotifyGamePlayerStateChange => typeof(NotifyGamePlayerStateChange),
            GameManagerNotification.NotifyGamePlayerTeamChange => throw new NotImplementedException(),
            GameManagerNotification.NotifyGameTeamIdChange => throw new NotImplementedException(),
            GameManagerNotification.NotifyProcessQueue => throw new NotImplementedException(),
            GameManagerNotification.NotifyPresenceModeChanged => throw new NotImplementedException(),
            GameManagerNotification.NotifyGamePlayerQueuePositionChange => throw new NotImplementedException(),
            GameManagerNotification.NotifyGameListUpdate => throw new NotImplementedException(),
            GameManagerNotification.NotifyAdminListChange => throw new NotImplementedException(),
            GameManagerNotification.NotifyCreateDynamicDedicatedServerGame => throw new NotImplementedException(),
            GameManagerNotification.NotifyGameNameChange => throw new NotImplementedException(),
            _ => throw new NotImplementedException(),
        };

        public enum GameManagerCommand : ushort
        {
            createGame = 1,
            destroyGame,
            advanceGameState,
            setGameSettings,
            setPlayerCapacity,
            setPresenceMode,
            setGameAttributes,
            setPlayerAttributes,
            joinGame,
            removePlayer = 11,
            startMatchmaking = 13,
            cancelMatchmaking,
            finalizeGameCreation,
            listGames = 17,
            setPlayerCustomData,
            replayGame,
            returnDedicatedServerToPool,
            joinGameByGroup,
            leaveGameByGroup,
            migrateGame,
            updateGameHostMigrationStatus,
            resetDedicatedServer,
            updateGameSession,
            banPlayer,
            updateMeshConnection = 29,
            removePlayerFromBannedList = 31,
            clearBannedList,
            getBannedList,
            addQueuedPlayerToGame = 38,
            updateGameName,
            ejectHost,
            getGameListSnapshot = 100,
            getGameListSubscription,
            destroyGameList,
            getFullGameData,
            getMatchmakingConfig,
            getGameDataFromId,
            addAdminPlayer,
            removeAdminPlayer,
            setPlayerTeam,
            changeGameTeamId,
            migrateAdminPlayer,
            getUserSetGameListSubscription,
            swapPlayersTeam,
            registerDynamicDedicatedServerCreator = 150,
            unregisterDynamicDedicatedServerCreator
        }

        public enum GameManagerNotification : ushort
        {
            NotifyMatchmakingFailed = 10,
            NotifyMatchmakingAsyncStatus = 12,
            NotifyGameCreated = 15,
            NotifyGameRemoved,
            NotifyGameSetup = 20,
            NotifyPlayerJoining,
            NotifyJoiningPlayerInitiateConnections,
            NotifyPlayerJoiningQueue,
            NotifyPlayerPromotedFromQueue,
            NotifyPlayerClaimingReservation,
            NotifyPlayerJoinCompleted = 30,
            NotifyPlayerRemoved = 40,
            NotifyHostMigrationFinished = 60,
            NotifyHostMigrationStart = 70,
            NotifyPlatformHostInitialized,
            NotifyGameAttribChange = 80,
            NotifyPlayerAttribChange = 90,
            NotifyPlayerCustomDataChange = 95,
            NotifyGameStateChange = 100,
            NotifyGameSettingsChange = 110,
            NotifyGameCapacityChange,
            NotifyGameReset,
            NotifyGameReportingIdChange,
            NotifyGameSessionUpdated = 115,
            NotifyGamePlayerStateChange,
            NotifyGamePlayerTeamChange,
            NotifyGameTeamIdChange,
            NotifyProcessQueue,
            NotifyPresenceModeChanged,
            NotifyGamePlayerQueuePositionChange,
            NotifyGameListUpdate = 201,
            NotifyAdminListChange,
            NotifyCreateDynamicDedicatedServerGame = 220,
            NotifyGameNameChange = 230
        }

        public enum GameManagerError
        {
            GAMEMANAGER_ERR_PLAYER_NOT_IN_GROUP = 9961476,
            GAMEMANAGER_ERR_INVALID_GROUP_ID = 9895940,
            GAMEMANAGER_ERR_INVALID_GAME_ENTRY_TYPE = 7995396,
            GAMEMANAGER_ERR_RESERVATION_ALREADY_EXISTS = 7864324,
            GAMEMANAGER_ERR_NO_RESERVATION_FOUND = 7929860,
            GAMEMANAGER_ERR_BANNED_LIST_MAX = 7536644,
            GAMEMANAGER_ERR_BANNED_PLAYER_NOT_FOUND = 7471108,
            GAMEMANAGER_ERR_ENFORCING_SINGLE_GROUP_JOINS = 7405572,
            GAMEMANAGER_ERR_GAME_ENTRY_CRITERIA_FAILED = 7274500,
            GAMEMANAGER_ERR_ALREADY_IN_QUEUE = 7340036,
            GAMEMANAGER_ERR_PLAYER_BANNED = 7208964,
            GAMEMANAGER_ERR_JOIN_PLAYER_FAILED = 7077892,
            GAMEMANAGER_ERR_INVALID_PLAYER_PASSEDIN = 7012356,
            GAMEMANAGER_ERR_ALREADY_GAME_MEMBER = 6750212,
            GAMEMANAGER_ERR_REMOVE_PLAYER_FAILED = 6815748,
            GAMEMANAGER_ERR_PLAYER_NOT_FOUND = 6619140,
            GAMEMANAGER_ERR_DEQUEUE_WHILE_IN_PROGRESS = 3473412,
            GAMEMANAGER_ERR_DEQUEUE_WHILE_MIGRATING = 3407876,
            GAMEMANAGER_ERR_INVALID_QUEUE_METHOD = 3276804,
            GAMEMANAGER_ERR_PLAYER_NOT_IN_QUEUE = 3342340,
            GAMEMANAGER_ERR_DEDICATED_SERVER_HOST = 2162692,
            GAMEMANAGER_ERR_NOT_IN_ADMIN_LIST = 2097156,
            GAMEMANAGER_ERR_ALREADY_ADMIN = 2031620,
            GAMEMANAGER_ERR_NOT_TOPOLOGY_HOST = 1048580,
            GAMEMANAGER_ERR_PERMISSION_DENIED = 1966084,
            GAMEMANAGER_ERR_NOT_VIRTUAL_GAME = 983044,
            GAMEMANAGER_ERR_SLOT_OCCUPIED = 917508,
            GAMEMANAGER_ERR_INVALID_JOIN_METHOD = 851972,
            GAMEMANAGER_ERR_GAME_IN_PROGRESS = 720900,
            GAMEMANAGER_ERR_RESERVED_GAME_ID_INVALID = 786436,
            GAMEMANAGER_ERR_GAME_PROTOCOL_VERSION_MISMATCH = 655364,
            GAMEMANAGER_ERR_INVALID_GAME_ENTRY_CRITERIA = 589828,
            GAMEMANAGER_ERR_QUEUE_FULL = 524292,
            GAMEMANAGER_ERR_INVALID_GAME_STATE_ACTION = 393220,
            GAMEMANAGER_ERR_FAILED_IN_GAME_DESTROY = 458756,
            GAMEMANAGER_ERR_INVALID_GAME_STATE_TRANSITION = 327684,
            GAMEMANAGER_ERR_GAME_FULL = 262148,
            GAMEMANAGER_ERR_JOIN_METHOD_NOT_SUPPORTED = 196612,
            GAMEMANAGER_ERR_INVALID_GAME_SETTINGS = 65540,
            GAMEMANAGER_ERR_INVALID_GAME_ID = 131076,
            GAMEMANAGER_ERR_DEDICATED_SERVER_ONLY_ACTION = 19791876,
            GAMEMANAGER_ERR_NO_DEDICATED_SERVER_FOUND = 19726340,
            GAMEMANAGER_ERR_INVALID_TEAM_CAPACITY = 16842756,
            GAMEMANAGER_ERR_TEAM_FULL = 16711684,
            GAMEMANAGER_ERR_TEAMS_DISABLED = 16777220,
            GAMEMANAGER_ERR_TOTAL_TEAM_CAPACITY_INVALID = 16646148,
            GAMEMANAGER_ERR_TEAM_NOT_ALLOWED = 16580612,
            GAMEMANAGER_ERR_INVALID_TEAM_ID_IN_TEAM_CAPACITIES_VECTOR = 16515076,
            GAMEMANAGER_ERR_INVALID_TEAM_CAPACITIES_VECTOR_SIZE = 16384004,
            GAMEMANAGER_ERR_DUPLICATE_TEAM_CAPACITY = 16449540,
            GAMEMANAGER_ERR_MAX_PLAYER_CAPACITY_TOO_LARGE = 15269892,
            GAMEMANAGER_ERR_PLAYER_CAPACITY_IS_ZERO = 15204356,
            GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_LARGE = 15138820,
            GAMEMANAGER_ERR_MATCHMAKING_EXCEEDED_MAX_REQUESTS = 13500420,
            GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_SMALL = 15073284,
            GAMEMANAGER_ERR_MATCHMAKING_USERSESSION_NOT_FOUND = 13434884,
            GAMEMANAGER_ERR_MATCHMAKING_NO_JOINABLE_GAMES = 13303812,
            GAMEMANAGER_ERR_NOT_MATCHMAKING_SESSION_OWNER = 13238276,
            GAMEMANAGER_ERR_INVALID_MATCHMAKING_CRITERIA = 13107204,
            GAMEMANAGER_ERR_UNKNOWN_MATCHMAKING_SESSION_ID = 13172740,
            GAMEBROWSER_ERR_INVALID_LIST_CONFIG_NAME = 26542084,
            GAMEBROWSER_ERR_NOT_LIST_OWNER = 26476548,
            GAMEBROWSER_ERR_INVALID_LIST_ID = 26411012,
            GAMEBROWSER_ERR_INVALID_CRITERIA = 26279940,
            GAMEBROWSER_ERR_INVALID_CAPACITY = 26345476,
            GAMEMANAGER_ERR_DYNAMIC_DEDICATED_SERVER_MODE_CONFLICT = 20119556,
            GAMEMANAGER_ERR_DYNAMIC_GAME_CREATION_FAILED_NO_CAPACITY = 20054020,
            GAMEMANAGER_ERR_DYNAMIC_GAME_CREATION_TIMED_OUT = 19988484,
            GAMEMANAGER_ERR_DEDICATED_SERVER_HOST_CANNOT_JOIN = 19857412,
            GAMEMANGER_ERR_MACHINE_ID_LIST_EMPTY = 19922948,
            GAMEMANAGER_ERR_MIGRATION_NOT_SUPPORTED = 33095684,
            GAMEMANAGER_ERR_NOT_PLATFORM_HOST = 33030148,
            GAMEMANAGER_ERR_INVALID_ACTION_FOR_GROUP = 32964612,
            GAMEBROWSER_ERR_CANNOT_GET_USERSET = 26607620,
            GAMEMANAGER_ERR_GAME_CAPACITY_TOO_SMALL = 32899076,
            GAMEMANAGER_ERR_INVALID_PERSISTED_GAME_ID_OR_SECRET = 33292292,
            GAMEMANAGER_ERR_INVALID_NEWHOST = 33161220,
            GAMEMANAGER_ERR_USER_NOT_IN_ANY_GAME = 33226756
        }
    }
}
